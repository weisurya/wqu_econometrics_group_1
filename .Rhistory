library(tidyverse)
library(ggplot2)
# View time plot of the closing price
ggplot(data = transformed_data.close,
aes(x=as.Date(close_price$date), y=value, group=1) ) +
geom_line(aes(y=close_price$MMM, col='3M'), size = 1) +
geom_line(aes(y=close_price$C, col='C'), size = 1) +
geom_line(aes(y=close_price$PG, col='PG'), size = 1) +
geom_line(aes(y=close_price$GOOG, col='GOOG'), size = 1) +
geom_line(aes(y=close_price$MYL, col='MYL'), size = 1) +
labs(x = "Time", y = "Daily adjusted closing price")
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM^2, frequency = 12, start = 2008)
mmm_decompose <- stl(mmm_percentage_change, s.window = "periodic")
#mmm_arma_model <- arma(window(mmm_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
auto.arima(mmm_decompose, seasonal = FALSE)
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM^2, frequency = 12, start = 2008)
mmm_decompose <- stl(mmm_percentage_change, s.window = "periodic")
mmm_deseasonal_cnt <- seasadj(mmm_decompose)
#mmm_arma_model <- arma(window(mmm_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
auto.arima(mmm_deseasonal_cnt, seasonal = FALSE)
summary(mmm_arma_model)
Box.test(mmm_arma_model$residuals, lag = 12)
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM^2, frequency = 12, start = 2008)
mmm_decompose <- stl(mmm_percentage_change, s.window = "periodic")
mmm_deseasonal_cnt <- seasadj(mmm_decompose)
mmm_fit <- auto.arima(mmm_deseasonal_cnt, seasonal = FALSE)
tsdisplay(residuals(mmm_fit), lag.max = 12, main = "Model residuals")
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM^2, frequency = 12, start = 2008)
mmm_decompose <- stl(mmm_percentage_change, s.window = "periodic")
mmm_deseasonal_cnt <- seasadj(mmm_decompose)
mmm_fit <- auto.arima(mmm_deseasonal_cnt, seasonal = FALSE)
mmm_fit
tsdisplay(residuals(mmm_fit), lag.max = 12, main = "Model residuals")
# MMM
mmm_percentage_change_returns <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_decompose_returns <- stl(mmm_percentage_change_returns, s.window = "periodic")
mmm_deseasonal_returns <- seasadj(mmm_decompose_returns)
mmm_fit_returns <- auto.arima(mmm_deseasonal_returns, seasonal = FALSE)
mmm_fit_returns
tsdisplay(residuals(mmm_fit_returns), lag.max = 12, main = "MMM Model Residuals - Returns price")
# MMM
mmm_percentage_change_returns <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_decompose_returns <- stl(mmm_percentage_change_returns, s.window = "periodic")
mmm_deseasonal_returns <- seasadj(mmm_decompose_returns)
mmm_fit_returns <- auto.arima(mmm_deseasonal_returns, seasonal = FALSE)
mmm_fit_returns
tsdisplay(residuals(mmm_fit_returns), lag.max = 12, main = "MMM Model Residuals - Returns price")
# C
c_percentage_change_returns <- ts(transformed_data.returns$returns.C, frequency = 12, start = 2008)
c_decompose_returns <- stl(c_percentage_change_returns, s.window = "periodic")
c_deseasonal_returns <- seasadj(c_decompose_returns)
c_fit_returns <- auto.arima(c_deseasonal_returns, seasonal = FALSE)
c_fit_returns
tsdisplay(residuals(c_fit_returns), lag.max = 12, main = "C Model Residuals - Returns price")
# MMM
mmm_percentage_change_returns <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_decompose_returns <- stl(mmm_percentage_change_returns, s.window = "periodic")
mmm_deseasonal_returns <- seasadj(mmm_decompose_returns)
mmm_fit_returns <- auto.arima(mmm_deseasonal_returns, seasonal = FALSE)
mmm_fit_returns
tsdisplay(residuals(mmm_fit_returns), lag.max = 12, main = "MMM Model Residuals - Returns price")
# C
c_percentage_change_returns <- ts(transformed_data.returns$returns.C, frequency = 12, start = 2008)
c_decompose_returns <- stl(c_percentage_change_returns, s.window = "periodic")
c_deseasonal_returns <- seasadj(c_decompose_returns)
c_fit_returns <- auto.arima(c_deseasonal_returns, seasonal = FALSE)
c_fit_returns
tsdisplay(residuals(c_fit_returns), lag.max = 12, main = "C Model Residuals - Returns price")
# PG
pg_percentage_change_returns <- ts(transformed_data.returns$returns.PG, frequency = 12, start = 2008)
pg_decompose_returns <- stl(pg_percentage_change_returns, s.window = "periodic")
pg_deseasonal_returns <- seasadj(pg_decompose_returns)
pg_fit_returns <- auto.arima(pg_deseasonal_returns, seasonal = FALSE)
pg_fit_returns
tsdisplay(residuals(pg_fit_returns), lag.max = 12, main = "PG Model Residuals - Returns price")
# GOOG
goog_percentage_change_returns <- ts(transformed_data.returns$returns.GOOG, frequency = 12, start = 2008)
goog_decompose_returns <- stl(goog_percentage_change_returns, s.window = "periodic")
goog_deseasonal_returns <- seasadj(goog_decompose_returns)
goog_fit_returns <- auto.arima(goog_deseasonal_returns, seasonal = FALSE)
goog_fit_returns
tsdisplay(residuals(goog_fit_returns), lag.max = 12, main = "GOOG Model Residuals - Returns price")
# MYL
myl_percentage_change_returns <- ts(transformed_data.returns$returns.MYL, frequency = 12, start = 2008)
myl_decompose_returns <- stl(myl_percentage_change_returns, s.window = "periodic")
myl_deseasonal_returns <- seasadj(myl_decompose_returns)
myl_fit_returns <- auto.arima(myl_deseasonal_returns, seasonal = FALSE)
myl_fit_returns
tsdisplay(residuals(myl_fit_returns), lag.max = 12, main = "MYL Model Residuals - Returns price")
# MMM
mmm_percentage_change_squared_returns <- ts(transformed_data.returns$returns.MMM^2, frequency = 12, start = 2008)
mmm_decompose_squared_returns <- stl(mmm_percentage_change_squared_returns, s.window = "periodic")
mmm_deseasonal_squared_returns <- seasadj(mmm_decompose_squared_returns)
mmm_fit_squared_returns <- auto.arima(mmm_deseasonal_squared_returns, seasonal = FALSE)
mmm_fit_squared_returns
tsdisplay(residuals(mmm_fit_squared_returns), lag.max = 12, main = "MMM Model Residuals - Squared returns price")
# c
c_percentage_change_squared_returns <- ts(transformed_data.returns$returns.C^2, frequency = 12, start = 2008)
c_decompose_squared_returns <- stl(c_percentage_change_squared_returns, s.window = "periodic")
c_deseasonal_squared_returns <- seasadj(c_decompose_squared_returns)
c_fit_squared_returns <- auto.arima(c_deseasonal_squared_returns, seasonal = FALSE)
c_fit_squared_returns
tsdisplay(residuals(c_fit_squared_returns), lag.max = 12, main = "C Model Residuals - Squared returns price")
# MMM
mmm_percentage_change_squared_returns <- ts(transformed_data.returns$returns.MMM^2, frequency = 12, start = 2008)
mmm_decompose_squared_returns <- stl(mmm_percentage_change_squared_returns, s.window = "periodic")
mmm_deseasonal_squared_returns <- seasadj(mmm_decompose_squared_returns)
mmm_fit_squared_returns <- auto.arima(mmm_deseasonal_squared_returns, seasonal = FALSE)
mmm_fit_squared_returns
tsdisplay(residuals(mmm_fit_squared_returns), lag.max = 12, main = "MMM Model Residuals - Squared returns price")
# C
c_percentage_change_squared_returns <- ts(transformed_data.returns$returns.C^2, frequency = 12, start = 2008)
c_decompose_squared_returns <- stl(c_percentage_change_squared_returns, s.window = "periodic")
c_deseasonal_squared_returns <- seasadj(c_decompose_squared_returns)
c_fit_squared_returns <- auto.arima(c_deseasonal_squared_returns, seasonal = FALSE)
c_fit_squared_returns
tsdisplay(residuals(c_fit_squared_returns), lag.max = 12, main = "C Model Residuals - Squared returns price")
# GOOG
goog_percentage_change_squared_returns <- ts(transformed_data.returns$returns.GOOG^2, frequency = 12, start = 2008)
goog_decompose_squared_returns <- stl(goog_percentage_change_squared_returns, s.window = "periodic")
goog_deseasonal_squared_returns <- seasadj(goog_decompose_squared_returns)
goog_fit_squared_returns <- auto.arima(goog_deseasonal_squared_returns, seasonal = FALSE)
goog_fit_squared_returns
tsdisplay(residuals(goog_fit_squared_returns), lag.max = 12, main = "GOOG Model Residuals - Squared returns price")
# PG
pg_percentage_change_squared_returns <- ts(transformed_data.returns$returns.PG^2, frequency = 12, start = 2008)
pg_decompose_squared_returns <- stl(pg_percentage_change_squared_returns, s.window = "periodic")
pg_deseasonal_squared_returns <- seasadj(pg_decompose_squared_returns)
pg_fit_squared_returns <- auto.arima(pg_deseasonal_squared_returns, seasonal = FALSE)
pg_fit_squared_returns
tsdisplay(residuals(pg_fit_squared_returns), lag.max = 12, main = "PG Model Residuals - Squared returns price")
# MYL
myl_percentage_change_squared_returns <- ts(transformed_data.returns$returns.MYL^2, frequency = 12, start = 2008)
myl_decompose_squared_returns <- stl(myl_percentage_change_squared_returns, s.window = "periodic")
myl_deseasonal_squared_returns <- seasadj(myl_decompose_squared_returns)
myl_fit_squared_returns <- auto.arima(myl_deseasonal_squared_returns, seasonal = FALSE)
myl_fit_squared_returns
tsdisplay(residuals(myl_fit_squared_returns), lag.max = 12, main = "MYL Model Residuals - Squared returns price")
setwd("C:/Users/Raghu/OneDrive/WQU/2. Econometrics/Group Project")
dataset_MMM <- read.csv("MMM.csv")
head(dataset_MMM)
summary(dataset_MMM)
dataset_C <- read.csv("Citigroup.csv")
dataset_C <- read.csv("C.csv")
head(dataset_C)
summary(dataset_C)
dataset_PG <- read.csv("PG.csv")
head(dataset_PG)
summary(dataset_PG)
dataset_GOOG <- read.csv("GOOG.csv")
head(dataset_GOOG)
summary(dataset_GOOG)
dataset_MYL <- read.csv("MYL.csv")
head(dataset_MYL)
summary(dataset_MYL)
# Initialize date column for analyze purpose
close_price = NULL
close_price$date = dataset_MMM$Date
close_price$MMM = dataset_MMM$Adj.Close
close_price$C = dataset_C$Adj.Close
close_price$PG = dataset_PG$Adj.Close
close_price$GOOG = dataset_GOOG$Adj.Close
close_price$MYL = dataset_MYL$Adj.Close
#Show several example of each asset's close price
head(close_price$MMM)
head(close_price$C)
head(close_price$PG)
head(close_price$GOOG)
head(close_price$MYL)
# Initialize date column for analyze purpose
returns = NULL
returns$MMM = diff(log(close_price$MMM), lag = 1)
returns$C = diff(log(close_price$C), lag = 1)
returns$PG = diff(log(close_price$PG), lag = 1)
returns$GOOG = diff(log(close_price$GOOG), lag = 1)
returns$MYL = diff(log(close_price$MYL), lag = 1)
#Show several example of each asset's close price
head(returns$MMM)
head(returns$C)
head(returns$PG)
head(returns$GOOG)
head(returns$MYL)
transformed_data.close <- data.frame(close_price$date, close_price$MMM, close_price$C, close_price$PG, close_price$GOOG, close_price$MYL)
str(transformed_data.close)
n <- nrow(transformed_data.close)
returns$date <- close_price$date[2:n]
transformed_data.returns <- data.frame(returns$date, returns$MMM, returns$C, returns$PG, returns$GOOG, returns$MYL)
str(transformed_data.returns)
# Load necessary packages
library(tidyverse)
library(ggplot2)
# View time plot of the closing price
ggplot(data = transformed_data.close,
aes(x=as.Date(close_price$date), y=value, group=1) ) +
geom_line(aes(y=close_price$MMM, col='3M'), size = 1) +
geom_line(aes(y=close_price$C, col='C'), size = 1) +
geom_line(aes(y=close_price$PG, col='PG'), size = 1) +
geom_line(aes(y=close_price$GOOG, col='GOOG'), size = 1) +
geom_line(aes(y=close_price$MYL, col='MYL'), size = 1) +
labs(x = "Time", y = "Daily closing price")
# View time plot of the 3M return price
ggplot(data = transformed_data.returns,
aes(x=as.Date(returns$date), y=value, group=1) ) +
geom_line(aes(y=returns$MMM, col='3M'), size = 1, color='darkblue') +
labs(x = "Time", y = "Daily return series")
# View time plot of the C return price
ggplot(data = transformed_data.returns,
aes(x=as.Date(returns$date), y=value, group=1) ) +
geom_line(aes(y=returns$C, col='C'), size = 1, color='darkred') +
labs(x = "Time", y = "Daily return series")
# View time plot of the GOOG return price
ggplot(data = transformed_data.returns,
aes(x=as.Date(returns$date), y=value, group=1) ) +
geom_line(aes(y=returns$GOOG, col='GOOG'), size = 1, color='yellowgreen') +
labs(x = "Time", y = "Daily return series")
# View time plot of the MYL return price
ggplot(data = transformed_data.returns,
aes(x=as.Date(returns$date), y=value, group=1) ) +
geom_line(aes(y=returns$MYL, col='MYL'), size = 1, color='deeppink') +
labs(x = "Time", y = "Daily return series")
# View time plot of the PG return price
ggplot(data = transformed_data.returns,
aes(x=as.Date(returns$date), y=value, group=1) ) +
geom_line(aes(y=returns$PG, col='PG'), size = 1, color='blueviolet') +
labs(x = "Time", y = "Daily return series")
library(kdensity)
# MMM
hist(transformed_data.returns$returns.MMM, breaks = 64, freq = FALSE, main = "3M Company", xlab = "Daily log returns")
kde_mmm = kdensity(transformed_data.returns$returns.MMM, start = "normal")
lines(kde_mmm, col="blue")
lines(kde_mmm, plot_start = TRUE, col="red")
# C
hist(transformed_data.returns$returns.C, breaks = 64, freq = FALSE, main = "Citigroup Inc.", xlab = "Daily log returns")
kde_c = kdensity(transformed_data.returns$returns.C, start = "normal")
lines(kde_c, col="blue")
lines(kde_c, plot_start = TRUE, col="red")
# PG
hist(transformed_data.returns$returns.PG, breaks = 64, freq = FALSE, main = "The Procter & Gamble Company", xlab = "Daily log returns")
kde_pg = kdensity(transformed_data.returns$returns.PG, start = "normal")
lines(kde_pg, col="blue")
lines(kde_pg, plot_start = TRUE, col="red")
# GOOG
hist(transformed_data.returns$returns.GOOG, breaks = 64, freq = FALSE, main = "Alphabet Inc.", xlab = "Daily log returns")
kde_goog = kdensity(transformed_data.returns$returns.GOOG, start = "normal")
lines(kde_goog, col="blue")
lines(kde_goog, plot_start = TRUE, col="red")
# MYL
hist(transformed_data.returns$returns.MYL, breaks = 64, freq = FALSE, main = "Mylan N.V.", xlab = "Daily log returns")
kde_myl = kdensity(transformed_data.returns$returns.MYL, start = "normal")
lines(kde_myl, col="blue")
lines(kde_myl, plot_start = TRUE, col="red")
#MMM
mean_mmm = mean(transformed_data.returns$returns.MMM)
sd_mmm = sd(transformed_data.returns$returns.MMM)
mmm_std = (transformed_data.returns$returns.MMM - mean_mmm) / sd_mmm
qqnorm(mmm_std, main="3M Company Normal Q-Q Plot", plot.it = TRUE, datax = TRUE)
qqline(mmm_std, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75), qtype = 7)
#C
mean_c = mean(transformed_data.returns$returns.C)
sd_c = sd(transformed_data.returns$returns.C)
c_std = (transformed_data.returns$returns.C - mean_c) / sd_c
qqnorm(c_std, main="Citigroup Inc. Normal Q-Q Plot", plot.it = TRUE, datax = TRUE)
qqline(c_std, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75), qtype = 7)
#GOOG
mean_goog = mean(transformed_data.returns$returns.GOOG)
sd_goog = sd(transformed_data.returns$returns.GOOG)
goog_std = (transformed_data.returns$returns.GOOG - mean_goog) / sd_goog
qqnorm(goog_std, main="Alphabet Inc. Normal Q-Q Plot", plot.it = TRUE, datax = TRUE)
qqline(goog_std, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75), qtype = 7)
#MYL
mean_myl = mean(transformed_data.returns$returns.MYL)
sd_myl = sd(transformed_data.returns$returns.MYL)
myl_std = (transformed_data.returns$returns.MYL - mean_myl) / sd_myl
qqnorm(myl_std, main="Mylan N.V. Normal Q-Q Plot", plot.it = TRUE, datax = TRUE)
qqline(myl_std, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75), qtype = 7)
#PG
mean_pg = mean(transformed_data.returns$returns.PG)
sd_pg = sd(transformed_data.returns$returns.PG)
pg_std = (transformed_data.returns$returns.PG - mean_pg) / sd_pg
qqnorm(pg_std, main="The Procter & Gamble Company Normal Q-Q Plot", plot.it = TRUE, datax = TRUE)
qqline(pg_std, datax = FALSE, distribution = qnorm, probs = c(0.25, 0.75), qtype = 7)
ggplot(data = transformed_data.returns, aes(returns$MMM, (returns$C + returns$PG + returns$GOOG + returns$MYL))) +
geom_point() +
labs(x = "3M Company", y = "Others")
ggplot(data = transformed_data.returns, aes(returns$C, (returns$MMM + returns$PG + returns$GOOG + returns$MYL))) +
geom_point() +
labs(x = "Citigroup Inc.", y = "Others")
ggplot(data = transformed_data.returns, aes(returns$PG, (returns$MMM + returns$C + returns$GOOG + returns$MYL))) +
geom_point() +
labs(x = "The Procter & Gamble Company", y = "Others")
ggplot(data = transformed_data.returns, aes(returns$GOOG, (returns$MMM + returns$C + returns$PG + returns$MYL))) +
geom_point() +
labs(x = "Alphabet Inc.", y = "Others")
ggplot(data = transformed_data.returns, aes(returns$MYL, (returns$MMM + returns$C + returns$GOOG + returns$PG))) +
geom_point() +
labs(x = "Mylan N.V.", y = "Others")
library(stats)
library(tseries)
library(forecast)
# MMM
mmm_percentage_change <- ts(transformed_data.close$close_price.MMM, frequency = 12, start = 2008)
mmm_percentage_change_truncated <- window(mmm_percentage_change, start = 2013)
acf(mmm_percentage_change)
acf(mmm_percentage_change_truncated)
# C
c_percentage_change <- ts(transformed_data.close$close_price.C, frequency = 12, start = 2008)
c_percentage_change_truncated <- window(c_percentage_change, start = 2013)
acf(c_percentage_change)
acf(c_percentage_change_truncated)
# PG
pg_percentage_change <- ts(transformed_data.close$close_price.PG, frequency = 12, start = 2008)
pg_percentage_change_truncated <- window(pg_percentage_change, start = 2013)
acf(pg_percentage_change)
acf(pg_percentage_change_truncated)
# GOOG
goog_percentage_change <- ts(transformed_data.close$close_price.GOOG, frequency = 12, start = 2008)
goog_percentage_change_truncated <- window(goog_percentage_change, start = 2013)
acf(goog_percentage_change)
acf(goog_percentage_change_truncated)
# MYL
myl_percentage_change <- ts(transformed_data.close$close_price.MYL, frequency = 12, start = 2008)
myl_percentage_change_truncated <- window(myl_percentage_change, start = 2013)
acf(myl_percentage_change)
acf(myl_percentage_change_truncated)
# MMM
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_percentage_change_truncated <- window(mmm_percentage_change, start = 2013)
acf(mmm_percentage_change)
acf(mmm_percentage_change_truncated)
# C
c_percentage_change <- ts(transformed_data.returns$returns.C, frequency = 12, start = 2008)
c_percentage_change_truncated <- window(c_percentage_change, start = 2013)
acf(c_percentage_change)
acf(c_percentage_change_truncated)
# PG
pg_percentage_change <- ts(transformed_data.returns$returns.PG, frequency = 12, start = 2008)
pg_percentage_change_truncated <- window(pg_percentage_change, start = 2013)
acf(pg_percentage_change)
acf(pg_percentage_change_truncated)
# GOOG
goog_percentage_change <- ts(transformed_data.returns$returns.GOOG, frequency = 12, start = 2008)
goog_percentage_change_truncated <- window(goog_percentage_change, start = 2013)
acf(goog_percentage_change)
acf(goog_percentage_change_truncated)
# MYL
myl_percentage_change <- ts(transformed_data.returns$returns.MYL, frequency = 12, start = 2008)
myl_percentage_change_truncated <- window(myl_percentage_change, start = 2013)
acf(myl_percentage_change)
acf(myl_percentage_change_truncated)
# MMM
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_percentage_change_truncated <- window(mmm_percentage_change, start = 2013)
acf(mmm_percentage_change^2)
acf(mmm_percentage_change_truncated^2)
# C
c_percentage_change <- ts(transformed_data.returns$returns.C, frequency = 12, start = 2008)
c_percentage_change_truncated <- window(c_percentage_change, start = 2013)
acf(c_percentage_change^2)
acf(c_percentage_change_truncated^2)
# PG
pg_percentage_change <- ts(transformed_data.returns$returns.PG, frequency = 12, start = 2008)
pg_percentage_change_truncated <- window(pg_percentage_change, start = 2013)
acf(pg_percentage_change^2)
acf(pg_percentage_change_truncated^2)
# GOOG
goog_percentage_change <- ts(transformed_data.returns$returns.GOOG, frequency = 12, start = 2008)
goog_percentage_change_truncated <- window(goog_percentage_change, start = 2013)
acf(goog_percentage_change^2)
acf(goog_percentage_change_truncated^2)
# MYL
myl_percentage_change <- ts(transformed_data.returns$returns.MYL, frequency = 12, start = 2008)
myl_percentage_change_truncated <- window(myl_percentage_change, start = 2013)
acf(myl_percentage_change^2)
acf(myl_percentage_change_truncated^2)
# MMM
mmm_percentage_change <- ts(transformed_data.close$close_price.MMM, frequency = 12, start = 2008)
mmm_percentage_change_truncated <- window(mmm_percentage_change, start = 2013)
pacf(mmm_percentage_change)
pacf(mmm_percentage_change_truncated)
# C
c_percentage_change <- ts(transformed_data.close$close_price.C, frequency = 12, start = 2008)
c_percentage_change_truncated <- window(c_percentage_change, start = 2013)
pacf(c_percentage_change)
pacf(c_percentage_change_truncated)
# PG
pg_percentage_change <- ts(transformed_data.close$close_price.PG, frequency = 12, start = 2008)
pg_percentage_change_truncated <- window(pg_percentage_change, start = 2013)
pacf(pg_percentage_change)
pacf(pg_percentage_change_truncated)
# GOOG
goog_percentage_change <- ts(transformed_data.close$close_price.GOOG, frequency = 12, start = 2008)
goog_percentage_change_truncated <- window(goog_percentage_change, start = 2013)
pacf(goog_percentage_change)
pacf(goog_percentage_change_truncated)
# MYL
myl_percentage_change <- ts(transformed_data.close$close_price.MYL, frequency = 12, start = 2008)
myl_percentage_change_truncated <- window(myl_percentage_change, start = 2013)
pacf(myl_percentage_change)
pacf(myl_percentage_change_truncated)
# MMM
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_percentage_change_truncated <- window(mmm_percentage_change, start = 2013)
pacf(mmm_percentage_change)
pacf(mmm_percentage_change_truncated)
# C
c_percentage_change <- ts(transformed_data.returns$returns.C, frequency = 12, start = 2008)
c_percentage_change_truncated <- window(c_percentage_change, start = 2013)
pacf(c_percentage_change)
pacf(c_percentage_change_truncated)
# PG
pg_percentage_change <- ts(transformed_data.returns$returns.PG, frequency = 12, start = 2008)
pg_percentage_change_truncated <- window(pg_percentage_change, start = 2013)
pacf(pg_percentage_change)
pacf(pg_percentage_change_truncated)
# GOOG
goog_percentage_change <- ts(transformed_data.returns$returns.GOOG, frequency = 12, start = 2008)
goog_percentage_change_truncated <- window(goog_percentage_change, start = 2013)
pacf(goog_percentage_change)
pacf(goog_percentage_change_truncated)
# MYL
myl_percentage_change <- ts(transformed_data.returns$returns.MYL, frequency = 12, start = 2008)
myl_percentage_change_truncated <- window(myl_percentage_change, start = 2013)
pacf(myl_percentage_change)
pacf(myl_percentage_change_truncated)
# MMM
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_percentage_change_truncated <- window(mmm_percentage_change, start = 2013)
pacf(mmm_percentage_change^2)
pacf(mmm_percentage_change_truncated^2)
# C
c_percentage_change <- ts(transformed_data.returns$returns.C, frequency = 12, start = 2008)
c_percentage_change_truncated <- window(c_percentage_change, start = 2013)
pacf(c_percentage_change^2)
pacf(c_percentage_change_truncated^2)
# PG
pg_percentage_change <- ts(transformed_data.returns$returns.PG, frequency = 12, start = 2008)
pg_percentage_change_truncated <- window(pg_percentage_change, start = 2013)
pacf(pg_percentage_change^2)
pacf(pg_percentage_change_truncated^2)
# GOOG
goog_percentage_change <- ts(transformed_data.returns$returns.GOOG, frequency = 12, start = 2008)
goog_percentage_change_truncated <- window(goog_percentage_change, start = 2013)
pacf(goog_percentage_change^2)
pacf(goog_percentage_change_truncated^2)
# MYL
myl_percentage_change <- ts(transformed_data.returns$returns.MYL, frequency = 12, start = 2008)
myl_percentage_change_truncated <- window(myl_percentage_change, start = 2013)
pacf(myl_percentage_change^2)
pacf(myl_percentage_change_truncated^2)
# MMM
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM, frequency = 12, start = 2008)
mmm_arma_model <- arma(window(mmm_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(mmm_arma_model)
Box.test(mmm_arma_model$residuals, lag = 12)
# Citi
citi_percentage_change <- ts(transformed_data.returns$returns.C, frequency = 12, start = 2008)
citi_arma_model <- arma(window(citi_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(citi_arma_model)
Box.test(citi_arma_model$residuals, lag = 12)
# P & G
pg_percentage_change <- ts(transformed_data.returns$returns.PG, frequency = 12, start = 2008)
pg_arma_model <- arma(window(pg_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(pg_arma_model)
Box.test(pg_arma_model$residuals, lag = 12)
# Google
goog_percentage_change <- ts(transformed_data.returns$returns.GOOG, frequency = 12, start = 2008)
goog_arma_model <- arma(window(goog_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(goog_arma_model)
Box.test(goog_arma_model$residuals, lag = 12)
# MYL
myl_percentage_change <- ts(transformed_data.returns$returns.MYL, frequency = 12, start = 2008)
myl_arma_model <- arma(window(myl_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(myl_arma_model)
Box.test(myl_arma_model$residuals, lag = 12)
#MMM
mmm_percentage_change <- ts(transformed_data.returns$returns.MMM^2, frequency = 12, start = 2008)
mmm_arma_model <- arma(window(mmm_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(mmm_arma_model)
Box.test(mmm_arma_model$residuals, lag = 12)
# Citi
citi_percentage_change <- ts(transformed_data.returns$returns.C^2, frequency = 12, start = 2008)
citi_arma_model <- arma(window(citi_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(citi_arma_model)
Box.test(citi_arma_model$residuals, lag = 12)
# P & G
pg_percentage_change <- ts(transformed_data.returns$returns.PG^2, frequency = 12, start = 2008)
pg_arma_model <- arma(window(pg_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(pg_arma_model)
Box.test(pg_arma_model$residuals, lag = 12)
# Google
goog_percentage_change <- ts(transformed_data.returns$returns.GOOG^2, frequency = 12, start = 2008)
goog_arma_model <- arma(window(goog_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(goog_arma_model)
Box.test(goog_arma_model$residuals, lag = 12)
# MYL
myl_percentage_change <- ts(transformed_data.returns$returns.MYL^2, frequency = 12, start = 2008)
myl_arma_model <- arma(window(myl_percentage_change, start = 2008, end = 2018), order = c(12,0,0) )
summary(myl_arma_model)
Box.test(myl_arma_model$residuals, lag = 12)
mmm_forecast_model <- ar(window(mmm_percentage_change, start = 2008, end = 2018), order = 12, method = "mle")
mmm_forecast <- predict(mmm_forecast_model, n.ahead = 72, se.fit = TRUE)
mmm_forecast_model <- ar(window(mmm_percentage_change, start = 2008, end = 2018), order = 12, method = "mle")
mmm_forecast <- predict(mmm_forecast_model, n.ahead = 72, se.fit = TRUE)
plot(window(mmm_percentage_change, start = 2008, end = 2018))
lines(mmm_forecast$pred, col="blue")
lines(mmm_forecast$pred+2*AR_forecast$se,col="cornflowerblue",lty = "dashed")
mmm_forecast_model <- ar(window(mmm_percentage_change, start = 2008, end = 2018), order = 12, method = "mle")
mmm_forecast <- predict(mmm_forecast_model, n.ahead = 72, se.fit = TRUE)
plot(window(mmm_percentage_change, start = 2008, end = 2018))
lines(mmm_forecast$pred, col="blue")
lines(mmm_forecast$pred+2*mmm_forecast$se,col="cornflowerblue",lty = "dashed")
lines(mmm_forecast$pred-2*mmm_forecast$se,col="cornflowerblue",lty = "dashed")
